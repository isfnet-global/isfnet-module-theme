<?php

//---------------- Begin hooks --------------------//

/**
 * Implements hook_permission()
 */
function jobs_permission()
{
	$permissions = array
	(
		'administer job types' => array
		(
			'title' => t('Administer job types'),
			'description' => t('Allows administrators to edit job types'),
		),
		'administer job settings' => array
		(
			'title' => t('Administer job settings'),
			'description' => t('Allows users to access the jobs setting page'),
		),
		'view jobs page' => array
		(
			'title' => t('View Jobs page'),
			'description' => t('Allows users to access the page located at /jobs'),
		),
		'view jobs admin page' => array
		(
			'title' => t('View jobs admin page'),
			'description' => t('Allows administrators to access the published jobs list located at admin/content/jobs/published'),
		),
		'translate jobs' => array
		(
			'title' => t('Translate jobs'),
			'description' => t('Allows users to access the untranslated jobs list at admin/content/jobs/untranslated order to see jobs that need translating. The user will also need permission to edit the job so that they can translate it.'),
		),
		'moderate jobs' => array
		(
			'title' => t('Moderate jobs'),
			'description' => t('Allows users to access the jobs moderation page at admin/content/jobs/moderated in order to see jobs that are awaiting moderation. The user will also need permission to edit the job so they can mark it as published.'),
		),
		'view applicant data for any job' => array
		(
			'title' => t('View applicant data for any job'),
			'description' => t('Allows users to see all applications for any job on the site'),
		),
	);
	$ops = array('view', 'edit', 'delete');
	// Set permissions for each individual job type with each individual
	foreach(jobs_get_job_types() as $type)
	{
		foreach($ops as $op)
		{
			$permissions[$op . ' all Jobs of type: ' . $type->type] = array
			(
				'title' => t('!op all Jobs of type: !type', array('!op' => ucfirst($op), '!type' => $type->type)),
				'description' => t('Allows administrators to !op all Jobs of type: !type', array('!op' => strtolower($op), '!type' => $type->type)),
			);
			$permissions[$op . ' own Jobs of type: ' . $type->type] = array
			(
				'title' => t('!op own Jobs of type: !type', array('!op' => ucfirst($op), '!type' => $type->type)),
				'description' => t('Allows users to !op any Jobs of type !job that they have created', array('!op' => $op, '!type' => $type->type)),
			);
		}
		$permissions['view unpublished Jobs of type: ' . $type->type] = array
		(
			'title' => t('View unpublished jobs of type: !type', array('!type' => $type->type)),
			'description' => t('Allows users to view Jobs of type !type even when the Job is unpublished in the current language.'),
		);
		$permissions['create Jobs of type: ' . $type->type] = array
		(
			'title' => t('Create Jobs of type: !type', array('!type' => $type->type)),
			'description' => t('Allows administrators to create Jobs of type: !type', array('!type' => $type->type)),
		);
	}
	return $permissions;
}

/**
 * Implementation of hook_menu()
 */
function jobs_menu()
{
	$menu['jobs'] = array
	(
		'title' => 'Jobs',
		'page callback' => 'jobs_page',
		'access arguments' => array('view jobs page'),
		'file' => 'includes/jobs.admin.inc',
		'menu' => 'shortcut-set-1',
	);
	$menu['job/%job'] = array
	(
		'title callback' => 'job_page_title',
		'title arguments' => array(1),
		'page callback' => 'job_page_view',
		'page arguments' => array(1),
		'access callback' => 'job_access',
		'access arguments' => array('view', FALSE, 1),
		'type' => MENU_CALLBACK,
	);
	$menu['job/%job/view'] = array
	(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -10,
	);
	$menu['job/%job/edit'] = array
	(
		'title' => 'Edit',
		'page callback' => 'job_edit',
		'page arguments' => array(1),
		'access callback' => 'job_access',
		'access arguments' => array('edit', FALSE, 1),
		'file' => 'includes/jobs.admin.inc',
		'type' => MENU_LOCAL_TASK,
	);
	$menu['job/%job/delete'] = array
	(
		'title' => 'Delete',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('job_delete_confirm', 1),
		'access callback' => 'job_access',
		'access arguments' => array('delete', NULL, 1),
		'weight' => 1,
		'type' => MENU_LOCAL_TASK,
		'context' => MENU_CONTEXT_INLINE,
		'file' => 'includes/jobs.admin.inc',
	);
	$menu['job/add'] = array
	(
		'title' => 'Add Job',
		'page callback' => 'jobs_job_add_page',
		'access callback' => 'job_access',
		'access arguments' => array('create'),
		'file' => 'includes/jobs.admin.inc',
		'menu' => 'shortcut-set-1',
	);
  	foreach(jobs_get_job_types() as $type)
	{
	    $type_url_str = str_replace('_', '-', $type->type);
	    $menu['job/add/' . $type_url_str] = array
	    (
			'title' => $type->label,
			'title callback' => 'check_plain',
			'page callback' => 'job_add',
			'page arguments' => array($type),
			'access callback' => 'job_access',
			'access arguments' => array('create', $type),
			'file' => 'includes/jobs.admin.inc',
			'type' => MENU_CALLBACK,
		);
	}
	$menu['admin/content/jobs'] = array
	(
		'title' => 'Jobs',
		'page callback' => 'jobs_admin_list',
		'page arguments' => array('published'),
		'access arguments' => array('view jobs admin page'),
		'file' => 'includes/jobs.admin.inc',
		'type' => MENU_LOCAL_TASK,
	);
	$menu['admin/content/jobs/published'] = array
	(
		'title' => 'Published',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -50,
	);
	$menu['admin/content/jobs/untranslated'] = array
	(
		'title' => 'Untranslated',
		'page callback' => 'jobs_admin_list',
		'page arguments' => array('untranslated'),
		'access arguments' => array('translate jobs'),
		'file' => 'includes/jobs.admin.inc',
		'type' => MENU_LOCAL_TASK,
	);
	$menu['admin/content/jobs/queue'] = array
	(
		'title' => 'Queue',
		'page callback' => 'jobs_admin_list',
		'page arguments' => array('queue'),
		'access arguments' => array('moderate jobs'),
		'file' => 'includes/jobs.admin.inc',
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);
	$menu['admin/config/development/jobs'] = array
	(
		'title' => 'Jobs module settings',
		'description' => t('Administer settings for the jobs module'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('jobs_admin_page'),
		'access arguments' => array('administer job settings'),
		'file' => 'includes/jobs.admin.inc',
	);
	return $menu;
}

/**
 * Implementation of hook_entity_info().
 *
 * Creates the following entity types:
 *   job
 *   job type
*/
function jobs_entity_info()
{
	$entity_info['job'] = array
	(
		'label' => t('Job'),
		'plural label' => t('Jobs'),
		'module' => 'jobs',
		'controller class' => 'EntityAPIController',
		'entity class' => 'Job',
		'base table' => 'jobs',
		'uri callback' => 'entity_class_uri',
		'access callback' => 'job_entity_access',
		'fieldable' => TRUE,
		'translatable' => TRUE,
		'entity keys' => array
		(
			'id' => 'jid',
			'label' => 'label',
			'bundle' => 'type',
		),
		'bundles' => array(),
		'bundle keys' => array
		(
			'bundle' => 'type',
		),
		'view modes' => array
		(
			'full' => array
			(
				'label' => t('On form'),
				'custom settings' => FALSE,
			),
		),
	);

	$types = db_select('job_type', 'jt')
		->fields('jt')
		->execute()
		->fetchAllAssoc('type');

	foreach ($types as $type => $info)
	{
		$entity_info['job']['bundles'][$type] = array
		(
			'label' => $info->label,
			'admin' => array
			(
				'path' => 'admin/structure/jobs/manage/%job_type',
				'real path' => 'admin/structure/jobs/manage/' . $type,
				'bundle argument' => 4,
				'access arguments' => array('administer job types'),
			),
		);
	}

	$entity_info['job_type'] = array
	(
		'label' => t('Job type'),
		'plural label' => t('Job types'),
		'module' => 'jobs',
		'description' => t('Type of Job.'),
		'entity class' => 'JobType',
		'controller class' => 'EntityAPIControllerExportable',
		'base table' => 'job_type',
		'bundle of' => 'job',
		'exportable' => TRUE,
		'fieldable' => FALSE,
		'entity keys' => array
		(
			'id' => 'id',
			'name' => 'type',
			'label' => 'label',
		),
		'access callback' => 'job_type_access',
		// Enable the entity API's admin UI.
		'admin ui' => array
		(
			'path' => 'admin/structure/jobs',
			'file' => 'includes/jobs.admin.inc',
			'controller class' => 'JobTypeUIController',
		),
	);

	return $entity_info;
}

/**
 * Implementation of hook_theme()
 */
function jobs_theme($existing, $type, $theme, $path)
{
	$path = drupal_get_path('module', 'jobs') . '/templates';
	return array
	(
		'job' => array
		(
			'arguments' => array
			(
				'job' => NULL,
				'application_form' => NULL,
				'already_applied' => FALSE,
				'applicant_table' => NULL,
			),
			'path' => $path,
			'template' => 'job',
		),
		'job_teaser' => array
		(
			'arguments' => array
			(
				'job' => NULL,
				'application_form' => FALSE,
				'already_applied' => FALSE,
			),
			'path' => $path,
			'template' => 'job-teaser',
		),
		'jobs_page' => array
		(
			'arguments' => array
			(
				'teasers' => NULL,
			),
			'path' => $path,
			'template' => 'jobs-page',
		),
		'jobs_page_untranslated' => array
		(
			'arguments' => array
			(
				'untranslated_jobs_table' => NULL,
			),
			'path' => $path,
			'template' => 'jobs-page-untranslated',
		),
		'jobs_page_queue' => array
		(
			'arguments' => array
			(
				'queue_jobs_table' => NULL,
			),
			'path' => $path,
			'template' => 'jobs-page-queue',
		),
		'jobs_page_published' => array
		(
			'arguments' => array
			(
				'published_jobs_table' => NULL,
			),
			'path' => $path,
			'template' => 'jobs-page-published',
		),
		'jobs_job_applicant_table' => array
		(
			'render element' => 'form',
		),
	);
}

/**
 * Implementation of hook_forms().
 * All jobs forms share the same form handler.
 */
function jobs_forms()
{
	$forms = array();
	if ($types = jobs_get_job_types())
	{
		foreach (array_keys($types) as $type)
		{
			$forms[$type . '_job_form']['callback'] = 'job_form';
			$forms[$type . '_job_form']['file'] = 'includes/jobs.admin.inc';
		}
	}
	return $forms;
}

/**
 * Implementation of hook_form_alter()
 */
function jobs_form_alter(&$form, &$form_state, $form_id)
{
	// Make changes t the job form. Allows for
	// the translations to be displayed above
	// form elements
	if(preg_match('/^\w+?_job_form/', $form_id))
	{
		drupal_add_css(drupal_get_path('module', 'jobs') . '/css/form.css');
		if(isset($form['#display_language_changed']) && $form['#display_language_changed'])
		{
			$display_language = language_list();
			$display_language = $display_language[$form['#display_language']];
			$type = $form_state['values']['job']->type;
			$prefix = '<div class="job_other_language_display"><em>' . t('Value in !language', array('!language' => $display_language->native)) . '</em>';
			$prefix .= '<div>';
			if(isset($form_state['values']['job']->translated_labels[$display_language->language]))
			{
				$prefix .= $form_state['values']['job']->translated_labels[$display_language->language];
			}
			else
			{
				$prefix .= '<div class="job_language_value_undefined">' . t('No value set for the selected language') . '</div>';
			}
			$prefix .= '</div>';
			$prefix .= '</div>';
			$form['job']['label']['#prefix'] = $prefix;
			foreach(element_children($form['job']['jobs_' . $type]) as $field_name)
			{
				$prefix = '<div class="job_other_language_display"><em>' . t('Value in !language', array('!language' => $display_language->native)) . '</em>';
				$field = $form_state['values']['job']->$field_name;
				if(isset($form_state['values'], $form_state['values']['job'], $form_state['values']['job']->$field_name, $field[$display_language->language], $field[$display_language->language][0]))
				{
					$items = array();
					if(count($field[$display_language->language]) > 1)
					{
						$items = array();
						for($i = 0; $i < count($field[$display_language->language]); $i++)
						{
							$items[] = t('Value !i: !value', array('!i' => $i + 1, '!value' => $field[$display_language->language][$i]['value']));
						}
						$prefix .= theme('item_list', array('items' => $items));
					}
					else
					{
						$prefix .= '<div>' . $field[$display_language->language][0]['value'] . '</div>';
					}
				}
				else
				{
					$prefix .= '<div class="job_language_value_undefined">' . t('No value set for the selected language') . '</div>';
				}
				$prefix .= '</div>';
				$form['job']['jobs_' . $type][$field_name]['#prefix'] = $prefix;
			}
		}
	}
}

/**
 * Implementation of hook_mail()
 */
function jobs_mail($key, &$message, $params)
{
	if($key == 'notify_applicant_application')
	{
		$applicant = $params['applicant'];
		$job = $params['job'];
		$search = array
		(
			'[applicant]',
			'[job_name]',
			'[job_link]',
			'[site_name]',
		);
		$replace = array
		(
			$applicant->name,
			$job->label,
			url('job/' . $job->jid, array('absolute' => TRUE)),
			variable_get('site_name', t('The Site')),
		);
		$message['subject'] = t('You applied for job: @job', array('@job' => $job->label));
		module_load_include('inc', 'jobs', 'includes/jobs.admin');
		$message['body'][] = str_replace($search, $replace, variable_get('jobs_get_default_jobs_mail_notify_applicant_application_text', jobs_get_default_jobs_mail_notify_applicant_application_text()));
	}
	elseif($key == 'notify_job_owner_application')
	{
		$owner = $params['owner'];
		$job = $params['job'];
		$search = array
		(
			'[owner]',
			'[job_name]',
			'[job_link]',
			'[site_name]',
		);
		$replace = array
		(
			$owner->name,
			$job->label,
			url('job/' . $job->jid, array('absolute' => TRUE)),
			variable_get('site_name', t('The Site')),
		);
		$message['subject'] = t('New application for job: @job', array('@job' => $job->label));
		module_load_include('inc', 'jobs', 'includes/jobs.admin');
		$message['body'][] = str_replace($search, $replace, variable_get('jobs_mail_notify_job_owner_application_text', jobs_get_default_jobs_mail_notify_job_owner_application_text()));
	}
	elseif($key == 'notify_admin_application')
	{
		$owner = $params['owner'];
		$job = $params['job'];
		$search = array
		(
			'[owner]',
			'[job_name]',
			'[job_link]',
			'[site_name]',
		);
		$replace = array
		(
			$owner->name,
			$job->label,
			url('job/' . $job->jid, array('absolute' => TRUE)),
			variable_get('site_name', t('The Site')),
		);
		$message['subject'] = t('New application for job: @job', array('@job' => $job->label));
		module_load_include('inc', 'jobs', 'includes/jobs.admin');
		$message['body'][] = str_replace($search, $replace, variable_get('jobs_mail_notify_admin_application_text', jobs_get_default_jobs_mail_notify_admin_application_text()));
	}
}

//---------------- End hooks --------------------//

//--------- Begin menu helper functions -----------//

/**
 * Sets the page title on the job page
 */
function job_page_title($job)
{
	return check_plain($job->label);
}

//--------- End menu helper functions -----------//

//---------- Begin loader functions ------------//

/**
 * Menu argument loader; Load a job type by string.
 *
 * @param $type
 *   The machine-readable name of a profile type to load.
 * @return
 *   A job type array or FALSE if $type does not exist.
 */
function job_type_load($type)
{
	return jobs_get_job_types($type);
}

/**
 * Gets an array of all job types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return ProfileType[]
 *   Depending whether $type isset, an array of job types or a single one.
 */
function jobs_get_job_types($type_name = NULL)
{
	$types = entity_load_multiple_by_name('job_type', isset($type_name) ? array($type_name) : FALSE);
	return isset($type_name) ? reset($types) : $types;
}

/**
 * Loads a job entity by its name/label
 */
function jobs_load_by_name($name = NULL)
{
	$jobs = entity_load('job', isset($name) ? array($name) : FALSE);
	return isset($jobs) ? reset($jobs) : $jobs;
}

/**
 * Loads a job entity by it's JID
 *
 * @return Job[]
 *  an array with a single Job object
 */
function job_load($jid, $reset = FALSE)
{
	$jobs = job_load_multiple(array($jid), array(), $reset);
	return reset($jobs);
}

/**
 * Loads multiple jobs from an array of JIDs
 *
 * @return Job[]
 *  an array of job objects
 */
function job_load_multiple($jids = array(), $conditions = array(), $reset = FALSE)
{
	$jobs = entity_load('job', $jids, $conditions, $reset);

	module_invoke_all('job_load', $jobs);

	return $jobs;
}

/**
 * Get the IDs for any jobs that have not yet been translated
 * in all languages, or in the langauge specified by $language_id
 */
function jobs_get_untranslated_jids($language_id = FALSE)
{
	if(!$language_id)
	{
		$result = db_query('SELECT jid FROM {jobs} WHERE translated IS NULL OR translated = :empty', array(':empty' => ''));
	}
	else
	{
		$languages = language_list();
		if(isset($languages[$language_id]))
		{
			$result = db_query
			(
				'SELECT jid ' .
				'FROM {jobs} ' .
				'WHERE (translated IS NULL ' .
				'OR translated = :empty) ' .
				'OR (translated != :language1 ' .
				'AND translated NOT LIKE :language2 ' .
				'AND translated NOT LIKE :language3 ' .
				'AND translated NOT LIKE :language4) ' .
				'ORDER BY changed',
				array
				(
					':empty' => '',
					':language1' => $language_id,
					':language2' => $language_id . '|%',
					':language3' => '%|' . $language_id,
					':language4' => '%|' . $language_id . '|%'
				)
			);
		}
		else
		{
			return array();
		}
	}
	
	$jids = array();
	foreach($result as $record)
	{
		$jids[] = $record->jid;
	}
	return $jids;	
}

/**
 * Get all the JIDs for the moderation queue for all languages,
 * or optionally for the language specified in $language_id
 */
function jobs_get_moderation_queue_jids($language_id = FALSE)
{
	if(!$language_id)
	{
		$result = db_query('SELECT jid FROM {jobs} WHERE LENGTH(translated) > 0 AND (published IS NULL OR published = "")');
	}
	else
	{
		$languages = language_list();
		if(isset($languages[$language_id]))
		{
			$result = db_query
			(
				'SELECT jid ' .
				'FROM {jobs} ' .
				'WHERE (translated = :language1 OR translated LIKE :language2 OR translated LIKE :language3 OR translated LIKE :language4) ' .
				'AND ((published IS NULL OR published = :empty) OR (published != :language1 AND published NOT LIKE :language2 AND published NOT LIKE :language3 AND published NOT LIKE :language4)) ' .
				'ORDER BY changed DESC',
				array
				(
					':language1' => $language_id,
					':language2' => $language_id . '|%',
					':language3' => '%|' . $language_id,
					':language4' => '%|' . $language_id . '|%',
					':empty' => '',
				)
			);
		}
		else
		{
			return array();
		}
	}
	
	$jids = array();
	foreach($result as $record)
	{
		$jids[] = $record->jid;
	}
	return $jids;	
}

/**
 * Get a list of all published jids in all languages, or optionally
 * in the language specified by $language_id
 */
function jobs_get_published_jids($language_id = FALSE)
{
	if(!$language_id)
	{
		$result = db_query('SELECT jid FROM {jobs} WHERE LENGTH(published) > 0');
	}
	else
	{
		$languages = language_list();
		if(isset($languages[$language_id]))
		{
			$result = db_query
			(
				'SELECT jid ' .
				'FROM {jobs} ' .
				'WHERE (translated = :language1 OR translated LIKE :language2 OR translated LIKE :language3 OR translated LIKE :language4) ' .
				'AND (published = :language1 OR published LIKE :language2 OR published LIKE :language3 OR published LIKE :language4) ' .
				'ORDER BY changed DESC',
				array
				(
					':language1' => $language_id,
					':language2' => $language_id . '|%',
					':language3' => '%|' . $language_id,
					':language4' => '%|' . $language_id . '|%',
				)
			);
		}
		else
		{
			return array();
		}
	}
	
	$jids = array();
	foreach($result as $record)
	{
		$jids[] = $record->jid;
	}
	return $jids;	
}

/**
 * Get all jobs of the specified type in all languages,
 * or optionaly the language specified in $language_id
 */
function jobs_get_jobs($type, $language_id = FALSE)
{
	if($type == 'untranslated')
	{
		$jids = jobs_get_untranslated_jids($language_id);
	}
	elseif($type == 'moderation_queue')
	{
		$jids = jobs_get_moderation_queue_jids($language_id);
	}
	elseif($type = 'published')
	{
		$jids = jobs_get_published_jids($language_id);
	}
	if(count($jids))
	{
		return job_load_multiple($jids);
	}

	return array();
}

//---------- End loader functions ------------//

//---------- Begin access functions ------------//

/**
 * Access function for the various Job types
 * Checks the $op with the $type to determine if user has access
 */
function job_access($op, $type = FALSE, $job = FALSE)
{
	global $language, $user;

	if($user->uid === 1)
	{
		return TRUE;
	}
	switch($op)
	{
		case 'create':
			// Check to see if we are on the generic job/add page
			if(!$type && !$job)
			{
				foreach(jobs_get_job_types() as $type)
				{
					// If the user has permissions to create any job types,
					// the job/add link should be rendered, so we return TRUE
					if(user_access('create Jobs of type: ' . $type->type))
					{
						return TRUE;
					}
				}
			}
			// Check if the user has permission to create jobs of the given type
			else
			{
				$type = ($type) ? $type->type : $job->type;
				return user_access('create Jobs of type: ' . $type);
			}
			break;
		
		case 'view':
			if($job)
			{
				// If the job is unpublished, and the user has permission
				// to see unpublished jobs of this type, or it is their
				// own job, allow access
				if(!isset($job->published_languages[$language->language]))
				{
					if(user_access('view unpublished Jobs of type: ' . $job->type) || $job->uid === $user->uid)
					{
						return TRUE;
					}
					return FALSE;
				}
				// If the job is published, and the user has permission to
				// view their own jobs of that type, give permission
				elseif(isset($job->published_languages[$language->language]) && $job->uid && $job->uid === $user->uid && user_access('view own Jobs of type: ' . $job->type))
				{
					return TRUE;
				}
			}
			break;
		
		case 'edit':
		case 'delete':
			// If the user has permission to edit/delete their own
			// jobs, give permission
			if($job && $job->uid && $job->uid === $user->uid && user_access($op . ' own Jobs of type: ' . $job->type))
			{
				return TRUE;
			}
			break;
	}
	// If the user has permission to perform the $op on 
	// all jobs of the type, return TRUE, else deny everyone else.
	$type = ($type) ? $type->type : $job->type;
	return user_access($op . ' all Jobs of type: ' . $type);
}

/**
 * Overall access function for job entities. Not really used in this
 * module, but required by the Entity module
 */
function job_entity_access($op, $entity = NULL, $account = NULL)
{
	if($op == 'edit')
	{
		return user_access('Edit jobs');
	}
	elseif($op == 'view')
	{
		return user_access('View jobs');
	}
	elseif($op == 'create')
	{
		return user_access('Create jobs');
	}
	die($op);
}

/**
 * Access function for the entity module to check access on users
 * doing CRUD functions on JobTypes
 */
function job_type_access($op, $entity = NULL, $account= NULL)
{
	return user_access('administer job types');
}

//---------- End access functions ------------//

/**
 * Delete the job specified by $jid
 */
function job_delete($jid, $reset = FALSE)
{
	$jobs = job_delete_multiple(array($jid), array(), $reset);
}

/**
 * Delete multiple jobs
 */
function job_delete_multiple($jids = array(), $conditions = array(), $reset = FALSE)
{
	$jobs = entity_delete_multiple('job', $jids, array(), $reset);
}

/**
 * Save a single job
 */
function job_save(Jobs $jobs)
{
	return $jobs->save();
}

/**
 * Display the page of job listings
 */
function job_page_view($job)
{
	global $user;

	module_invoke_all('job_view', $job);

	$form = FALSE;
	$already_applied = FALSE;
	if(in_array('Applicant', $user->roles))
	{
		$already_applied = db_query_range('SELECT timestamp FROM {job_applications} WHERE jid = :jid AND uid = :uid', 0, 1, array(':jid' => $job->jid, ':uid' => $user->uid))->fetchField();
		if(!$already_applied)
		{
			// Get the form allowing users to apply for a job
			$form = drupal_render(drupal_get_form('jobs_job_application_form', $job));
		}
		else
		{
			$already_applied = format_date($already_applied);
		}
	}
	if($job->uid == $user->uid || user_access('view applicant data for any job'))
	{
		$results = db_query
		(
			'SELECT u.name, u.uid, ja.timestamp, ja.status ' .
			'FROM {users} AS u ' .
			'JOIN {job_applications} AS ja ' .
			'ON ja.uid = u.uid ' .
			'WHERE ja.jid = :jid',
			array(':jid' => $job->jid)
		);
		$applicant_list = array();
		foreach($results as $result)
		{
			$applicant_list[] = $result;
		}
		$applicant_table = drupal_render(drupal_get_form('jobs_applicant_table', $job->jid, $applicant_list));
	}
	else
	{
		$applicant_table = FALSE;
	}

	// Theme the job and output it
	return theme('job', array('job' => $job, 'application_form' => $form, 'already_applied' => $already_applied, 'applicant_table' => $applicant_table));
}

function jobs_applicant_table($form, &$form_state, $jid, $applicant_list)
{
	$form['jid'] = array
	(
		'#type' => 'value',
		'#value' => $jid,
	);
	$form['applicants'] = array
	(
		'#tree' => TRUE,
		'#theme' => 'jobs_job_applicant_table',
	);
	foreach($applicant_list as $applicant)
	{
		$form['applicants'][$applicant->uid]['name'] = array
		(
			'#markup' => (user_access('access user profiles')) ? l($applicant->name, 'user/' . $applicant->uid) : $applicant->name,
		);
		$form['applicants'][$applicant->uid]['timestamp'] = array
		(
			'#markup' => format_date($applicant->timestamp),
		);
		$form['applicants'][$applicant->uid]['status'] = array
		(
			'#type' => 'select',
			'#title' => t('Status'),
			'#options' => array
			(
				'---',
				t('Scheduled Interview'),
				t('Interviewed'),
				t('Accepted'),
				t('Rejected'),
			),
			'#default_value' => $applicant->status,
		);
	}
	if(count(element_children($form['applicants'])))
	{
		$form['submit'] = array
		(
			'#type' => 'submit',
			'#value' => t('Save status'),
			// Added by Tony; set up ajax callback function for ing email to applicants.
			'#ajax' => array(
			  'callback' => 'email_sending_callback'
			)
		);
	}
	return $form;
}

// Function added by Tony; callback function for emailing applicant regarding job status.
function email_sending_callback($form, $form_state) {
  $applicant = $form_state['build_info']['args'][1];
  
  
  foreach($applicant as $user) {
    $uid = $user->uid;
    $result = db_query("SELECT mail FROM prod_users WHERE uid = $uid");

	// Read in the email_templates
	$accepted_email = fopen("./email_scripts/applicant_accepted_email");
	
	foreach($result as $record) {
	  $to = "discrete19otmail";
	  $subject = "Test Email-1";
	  $body = "Hi this is a test email\n";
	  // Send the email
	  if ($sent=(mail($to, $subject, $body))) {
	    dpm("Notification email has been sent to all applicants");
	  } else {
	    dpm("Message failed to deliver to applicants");
	  }
	  dpm($sent);
	}
  }
}

function jobs_applicant_table_submit($form, &$form_state)
{
	foreach($form_state['values']['applicants'] as $uid => $status)
	{
		db_query(
			'UPDATE {job_applications} SET status = :status WHERE jid = :jid AND uid = :uid',
			array(
				':status' => $status,
				':jid' => $form_state['values']['jid'],
				':uid' => $uid,
			)
		);
	}
}

function theme_jobs_job_applicant_table($vars)
{
	$form = $vars['form'];
	
	$header = array(t('User'), t('Applied on'), t('Status'));
	$rows = array();
	foreach(element_children($form) as $key)
	{
		$row = array();

		$row[] = drupal_render($form[$key]['name']);
		$row[] = drupal_render($form[$key]['timestamp']);
		$row[] = drupal_render($form[$key]['status']);
		
		$rows[] = $row;
	}
	return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No on has applied for this job yet'))) . drupal_render_children($form);
}

/**
 * Form definition for form allowing
 * users to apply for jobs
 */
function jobs_job_application_form($form, &$form_state, $job)
{
	$form['job'] = array
	(
		'#type' => 'value',
		'#value' => $job,
	);
	$form['apply'] = array
	(
		'#type' => 'submit',
		'#value' => t('Apply for this job'),
	);
	return $form;
}

/**
 * Submit function for form defined in jobs_job_application_form()
 */
function jobs_job_application_form_submit($form, &$form_state)
{
	global $user;

	db_insert('job_applications')
		->fields
		(
			array
			(
				'jid' => $form_state['values']['job']->jid,
				'uid' => $user->uid,
				'timestamp' => REQUEST_TIME,
			)
		)
		->execute();

	$job = $form_state['values']['job'];
	$params = array
	(
		'owner' => user_load($job->uid),
		'applicant' => $user,
		'job' => $job,
	);
	drupal_mail
	(
		'jobs',
		'notify_applicant_application',
		$user->mail,
		user_preferred_language($user),
		$params
	);
	drupal_mail
	(
		'jobs',
		'notify_job_owner_application',
		$params['owner']->mail,
		user_preferred_language($params['owner']),
		$params
	);
	$admin_emails = variable_get('jobs_admin_emails', array());
	foreach($admin_emails as $address)
	{
		drupal_mail
		(
			'jobs',
			'notify_admin_application',
			$address,
			'en',
			$params			
		);
	}
}

function jobs_ajax_callback(&$form, &$form_state)
{
	if($form_state['values']['form_id'] == 'jobs_admin_list_table_form')
	{
		return $form['display'];
	}
	elseif(isset($form_state['values']['job'], $form_state['values']['job']->type) && $form_state['values']['form_id'] === $form_state['values']['job']->type . '_job_form')
	{
		return $form['job'];
	}
	elseif(isset($form_state['values']['recipient_list']))
	{
		return $form['recipients']['recipient_list'];
	}
}

/**
 * Form definition for jobs settings form
 */
function jobs_admin_page($form, &$form_state)
{
	$form['jobs_get_default_jobs_mail_notify_applicant_application_text'] = array
	(
		'#type' => 'textarea',
		'#title' => t('Email text: notify job applicant of their new application'),
		'#default_value' => variable_get('jobs_get_default_jobs_mail_notify_applicant_application_text', jobs_get_default_jobs_mail_notify_applicant_application_text()),
		'#description' => t('[applicant] will be replaced by the username of the recipient (the applicant)<br />[job_name] will be replaced with the name of the job<br />[job_link] will be replaced with a link to the job page<br />[site_name] will be replaced with the name of the site.'),
		'#rows' => 10,
	);
	$form['jobs_mail_notify_job_owner_application_text'] = array
	(
		'#type' => 'textarea',
		'#title' => t('Email text: notify job owner of new application'),
		'#default_value' => variable_get('jobs_mail_notify_job_owner_application_text', jobs_get_default_jobs_mail_notify_job_owner_application_text()),
		'#description' => t('[owner] will be replaced by the username of the recipient<br />[job_name] will be replaced with the name of the job<br />[job_link] will be replaced with a link to the job page<br />[site_name] will be replaced with the name of the site.'),
		'#rows' => 10,
	);
	$form['jobs_mail_notify_admin_application_text'] = array
	(
		'#type' => 'textarea',
		'#title' => t('Email text: notify admin of new application'),
		'#default_value' => variable_get('jobs_mail_notify_job_owner_application_text', jobs_get_default_jobs_mail_notify_job_owner_application_text()),
		'#description' => t('[owner] will be replaced by the name of the person who listed the job<br />[job_name] will be replaced with the name of the job<br />[job_link] will be replaced with a link to the job page<br />[site_name] will be replaced with the name of the site.'),
		'#rows' => 10,
	);
	$form['recipients'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Admin Emails'),
	);
	$form['recipients']['header'] = array
	(
		'#markup' => '<p>' . t('When applicants apply for jobs, a notification will be sent to each of the following email addresses. To stop notifications to an address, clear it from the field and click save.'),
	);
	$addresses = array();
	if(isset($form_state['values']['recipient_list']))
	{
		foreach($form_state['values']['recipient_list'] as $address)
		{
			if(strlen(trim($address)))
			{
				$addresses[] = trim($address);
			}
		}
	}
	else
	{
		$addresses = variable_get('jobs_admin_emails', array());
	}
	$form['recipients']['recipient_list'] = array
	(
		'#prefix' => '<div id="jobs_ajax_wrapper">',
		'#suffix' => '</div>',
		'#tree' => TRUE,
	);
	$i = 0;
	foreach($addresses as $address)
	{
		$form['recipients']['recipient_list'][$i] = array
		(
			'#type' => 'textfield',
			'#title' => t('Address !number', array('!number' => $i + 1)),
			'#default_value' => trim($address),
		);
		$i++;
	}
	$form['recipients']['recipient_list'][$i] = array
	(
		'#type' => 'textfield',
		'#title' => t('Address !number', array('!number' => $i + 1)),
	);
	$form['recipients']['add_row'] = array
	(
		'#type' => 'button',
		'#value' => t('Add address'),
		'#limit_validation_errors' => array(array('recipient_list')),
		'#ajax' => array
		(
			'callback' => 'jobs_ajax_callback',
			'wrapper' => 'jobs_ajax_wrapper',
		),
	);
	$form['submit'] = array
	(
		'#type' => 'submit',
		'#value' => t('Save settings'),
	);
	$form_state['cache'] = FALSE;
	return $form;
}


function jobs_admin_page_validate($form, &$form_state)
{
	form_load_include($form_state, 'inc', 'jobs', 'includes/jobs.admin');
	$i = 0;
	foreach($form_state['values']['recipient_list'] as $address)
	{
		$address = trim($address);
		if(strlen($address) && !valid_email_address($address))
		{
			form_set_error('recipient_list][' . $i, t('@address is not a valid email address', array('@address' => $address)));
		}
		$i++;
	}
}

function jobs_admin_page_submit($form, &$form_state)
{
	form_load_include($form_state, 'inc', 'jobs', 'includes/jobs.admin');
	variable_set('jobs_get_default_jobs_mail_notify_applicant_application_text', $form_state['values']['jobs_get_default_jobs_mail_notify_applicant_application_text']);
	variable_set('jobs_mail_notify_job_owner_application_text', $form_state['values']['jobs_mail_notify_job_owner_application_text']);
	variable_set('jobs_mail_notify_admin_application_text', $form_state['values']['jobs_mail_notify_admin_application_text']);
	$addresses = array();
	foreach($form_state['values']['recipient_list'] as $address)
	{
		$address = trim($address);
		if(strlen($address))
		{
			$addresses[] = $address;
		}
	}
	variable_set('jobs_admin_emails', $addresses);
}

// Added by Tony.  Hook to initialize css/js files.
function jobs_init() {
  drupal_add_js('sites/all/modules/jobs/javascript/jobs.js');
  drupal_add_js('sites/all/modules/jobs/javascript/jquery.scrollto.js');
  drupal_add_js('sites/all/modules/jobs/javascript/jquery.scrollto-min.js');
  drupal_add_css(drupal_get_path('module', 'jobs') . '/css/jobs3.css');  
}

function jobs_preprocess(&$variables, $hook) {
}
